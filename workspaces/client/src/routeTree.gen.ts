/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WriteupsIndexRouteImport } from './routes/writeups/index'
import { Route as CtfsIndexRouteImport } from './routes/ctfs/index'
import { Route as CategoriesIndexRouteImport } from './routes/categories/index'
import { Route as WriteupsNewRouteImport } from './routes/writeups/new'
import { Route as CtfsNewRouteImport } from './routes/ctfs/new'
import { Route as WriteupsWriteupIdIndexRouteImport } from './routes/writeups/$writeupId/index'
import { Route as CtfsCtfIdIndexRouteImport } from './routes/ctfs/$ctfId/index'
import { Route as WriteupsWriteupIdEditRouteImport } from './routes/writeups/$writeupId/edit'
import { Route as CtfsCtfIdEditRouteImport } from './routes/ctfs/$ctfId/edit'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WriteupsIndexRoute = WriteupsIndexRouteImport.update({
  id: '/writeups/',
  path: '/writeups/',
  getParentRoute: () => rootRouteImport,
} as any)
const CtfsIndexRoute = CtfsIndexRouteImport.update({
  id: '/ctfs/',
  path: '/ctfs/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesIndexRoute = CategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRouteImport,
} as any)
const WriteupsNewRoute = WriteupsNewRouteImport.update({
  id: '/writeups/new',
  path: '/writeups/new',
  getParentRoute: () => rootRouteImport,
} as any)
const CtfsNewRoute = CtfsNewRouteImport.update({
  id: '/ctfs/new',
  path: '/ctfs/new',
  getParentRoute: () => rootRouteImport,
} as any)
const WriteupsWriteupIdIndexRoute = WriteupsWriteupIdIndexRouteImport.update({
  id: '/writeups/$writeupId/',
  path: '/writeups/$writeupId/',
  getParentRoute: () => rootRouteImport,
} as any)
const CtfsCtfIdIndexRoute = CtfsCtfIdIndexRouteImport.update({
  id: '/ctfs/$ctfId/',
  path: '/ctfs/$ctfId/',
  getParentRoute: () => rootRouteImport,
} as any)
const WriteupsWriteupIdEditRoute = WriteupsWriteupIdEditRouteImport.update({
  id: '/writeups/$writeupId/edit',
  path: '/writeups/$writeupId/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const CtfsCtfIdEditRoute = CtfsCtfIdEditRouteImport.update({
  id: '/ctfs/$ctfId/edit',
  path: '/ctfs/$ctfId/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/ctfs/new': typeof CtfsNewRoute
  '/writeups/new': typeof WriteupsNewRoute
  '/categories': typeof CategoriesIndexRoute
  '/ctfs': typeof CtfsIndexRoute
  '/writeups': typeof WriteupsIndexRoute
  '/ctfs/$ctfId/edit': typeof CtfsCtfIdEditRoute
  '/writeups/$writeupId/edit': typeof WriteupsWriteupIdEditRoute
  '/ctfs/$ctfId': typeof CtfsCtfIdIndexRoute
  '/writeups/$writeupId': typeof WriteupsWriteupIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/ctfs/new': typeof CtfsNewRoute
  '/writeups/new': typeof WriteupsNewRoute
  '/categories': typeof CategoriesIndexRoute
  '/ctfs': typeof CtfsIndexRoute
  '/writeups': typeof WriteupsIndexRoute
  '/ctfs/$ctfId/edit': typeof CtfsCtfIdEditRoute
  '/writeups/$writeupId/edit': typeof WriteupsWriteupIdEditRoute
  '/ctfs/$ctfId': typeof CtfsCtfIdIndexRoute
  '/writeups/$writeupId': typeof WriteupsWriteupIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/ctfs/new': typeof CtfsNewRoute
  '/writeups/new': typeof WriteupsNewRoute
  '/categories/': typeof CategoriesIndexRoute
  '/ctfs/': typeof CtfsIndexRoute
  '/writeups/': typeof WriteupsIndexRoute
  '/ctfs/$ctfId/edit': typeof CtfsCtfIdEditRoute
  '/writeups/$writeupId/edit': typeof WriteupsWriteupIdEditRoute
  '/ctfs/$ctfId/': typeof CtfsCtfIdIndexRoute
  '/writeups/$writeupId/': typeof WriteupsWriteupIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/ctfs/new'
    | '/writeups/new'
    | '/categories'
    | '/ctfs'
    | '/writeups'
    | '/ctfs/$ctfId/edit'
    | '/writeups/$writeupId/edit'
    | '/ctfs/$ctfId'
    | '/writeups/$writeupId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/ctfs/new'
    | '/writeups/new'
    | '/categories'
    | '/ctfs'
    | '/writeups'
    | '/ctfs/$ctfId/edit'
    | '/writeups/$writeupId/edit'
    | '/ctfs/$ctfId'
    | '/writeups/$writeupId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/ctfs/new'
    | '/writeups/new'
    | '/categories/'
    | '/ctfs/'
    | '/writeups/'
    | '/ctfs/$ctfId/edit'
    | '/writeups/$writeupId/edit'
    | '/ctfs/$ctfId/'
    | '/writeups/$writeupId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  CtfsNewRoute: typeof CtfsNewRoute
  WriteupsNewRoute: typeof WriteupsNewRoute
  CategoriesIndexRoute: typeof CategoriesIndexRoute
  CtfsIndexRoute: typeof CtfsIndexRoute
  WriteupsIndexRoute: typeof WriteupsIndexRoute
  CtfsCtfIdEditRoute: typeof CtfsCtfIdEditRoute
  WriteupsWriteupIdEditRoute: typeof WriteupsWriteupIdEditRoute
  CtfsCtfIdIndexRoute: typeof CtfsCtfIdIndexRoute
  WriteupsWriteupIdIndexRoute: typeof WriteupsWriteupIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/writeups/': {
      id: '/writeups/'
      path: '/writeups'
      fullPath: '/writeups'
      preLoaderRoute: typeof WriteupsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ctfs/': {
      id: '/ctfs/'
      path: '/ctfs'
      fullPath: '/ctfs'
      preLoaderRoute: typeof CtfsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/writeups/new': {
      id: '/writeups/new'
      path: '/writeups/new'
      fullPath: '/writeups/new'
      preLoaderRoute: typeof WriteupsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ctfs/new': {
      id: '/ctfs/new'
      path: '/ctfs/new'
      fullPath: '/ctfs/new'
      preLoaderRoute: typeof CtfsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/writeups/$writeupId/': {
      id: '/writeups/$writeupId/'
      path: '/writeups/$writeupId'
      fullPath: '/writeups/$writeupId'
      preLoaderRoute: typeof WriteupsWriteupIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ctfs/$ctfId/': {
      id: '/ctfs/$ctfId/'
      path: '/ctfs/$ctfId'
      fullPath: '/ctfs/$ctfId'
      preLoaderRoute: typeof CtfsCtfIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/writeups/$writeupId/edit': {
      id: '/writeups/$writeupId/edit'
      path: '/writeups/$writeupId/edit'
      fullPath: '/writeups/$writeupId/edit'
      preLoaderRoute: typeof WriteupsWriteupIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ctfs/$ctfId/edit': {
      id: '/ctfs/$ctfId/edit'
      path: '/ctfs/$ctfId/edit'
      fullPath: '/ctfs/$ctfId/edit'
      preLoaderRoute: typeof CtfsCtfIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  CtfsNewRoute: CtfsNewRoute,
  WriteupsNewRoute: WriteupsNewRoute,
  CategoriesIndexRoute: CategoriesIndexRoute,
  CtfsIndexRoute: CtfsIndexRoute,
  WriteupsIndexRoute: WriteupsIndexRoute,
  CtfsCtfIdEditRoute: CtfsCtfIdEditRoute,
  WriteupsWriteupIdEditRoute: WriteupsWriteupIdEditRoute,
  CtfsCtfIdIndexRoute: CtfsCtfIdIndexRoute,
  WriteupsWriteupIdIndexRoute: WriteupsWriteupIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
